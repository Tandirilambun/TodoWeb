@using Microsoft.AspNetCore.Identity
@inject UserManager<User> userManager
@model TodoWeb.TodoVM.TaskVM
@{
    ViewData["Title"] = Model.Projects.ProjectName;
    Layout = "~/Views/Shared/_ProjectLayout.cshtml";
    Random random = new Random();
    var user = await userManager.GetUserAsync(User);
}

<div class="mx-5 px-5 pt-5">
    <div id="project-nav" class="pt-5">
        <div>
            <p class="m-0">Task Management</p>
            <h1>@Model.Projects.ProjectName</h1>
             <p class="m-0 desc-project"> @Model.Projects.ProjectDescription </p>
        </div>
        <div class="d-flex justify-content-between mt-5">
            <div class="d-flex align-items-center">
                <a asp-route="projectTask" id="all-btn" class="task-info">
                    All
                </a>
                <a asp-route="projectTask" id="running-btn" asp-route-status="running" class="task-info">
                    Still Running
                </a>
                <a asp-route="projectTask" id="complete-btn" asp-route-status="complete" class="task-info">
                    Completed
                </a>
            </div>
            <div class="project-info-container">
                <div class="project-info">
                    <p class="m-0">Total Task</p>
                    <h2 class="m-0">@ViewBag.TaskCount</h2>
                </div>
                <div class="project-info">
                    <p class="m-0">On Progress</p>
                    <h2 class="m-0">@Model.TasksRunning.Count</h2>
                </div>
                <div class="project-info">
                    <p class="m-0">Completed</p>
                    <h2 class="m-0">@Model.TasksComplete.Count</h2>
                </div>
            </div>
            <div class="d-flex align-items-center">
                <a asp-controller="TaskManagement" asp-action="ViewPdf" asp-route-id="@Model.Projects.ProjectId" class="project-btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Export to PDF" data-bs-custom-class="custom-tooltip">
                    <i class="bi bi-filetype-pdf"></i>
                </a>
                <a asp-controller="TaskManagement" asp-action="ExportExcel" asp-route-id="@Model.Projects.ProjectId" class="project-btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Export to Excel" data-bs-custom-class="custom-tooltip">
                    <i class="bi bi-filetype-xlsx"></i>
                </a>
                <div class="project-btn" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Project Participant" data-bs-custom-class="custom-tooltip">
                    <i class="bi bi-people-fill"></i>
                </div>
                <div class="project-btn" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Github Link" data-bs-custom-class="custom-tooltip">
                    <i class="bi bi-github"></i>
                </div>
                <div class="project-btn">
                    <i class="bi bi-three-dots-vertical"></i>
                </div>
            </div>
        </div>
    <hr />
    </div>
    <div class="task-container">
        @foreach (var task in Model.Tasks)
        {
            var colorClass = $"color-palette-{random.Next(1, 5)}";
            <div class="task-card rounded-5 d-flex flex-column justify-content-between @colorClass">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="task-title">@task.TaskTitle</h5>
                    <div class="dropend">
                        <button type="button" class="dropdown-btn" data-bs-toggle="dropdown" aria-expanded="false" @(task.IsCompleted ? "hidden" : "")>
                            <i class="bi bi-three-dots"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#updateTaskModal" onclick="GetValue(@task.TaskId)">
                                    <i class="bi bi-pencil me-2"></i>
                                    <span>Edit Task</span>
                                </a>
                            </li>
                            <li class="">
                                <form method="post" asp-controller="TaskManagement" asp-action="DoneTask">
                                    <input value="@task.TaskId" class="mb-4" type="hidden" name="task" />
                                    <input class="mb-4" name="project" type="hidden" value="@Model.Projects.ProjectId" />
                                    <button class="dropdown-item" type="submit">
                                        <i class="bi bi-check-all me-2"></i>
                                        <span>Set as Done</span>
                                    </button>
                                </form>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="d-flex align-items-center gap-2 progress-container">
                    <div class="progress-bar @(task.IsCompleted == true ? "task-complete" : "")"></div>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <a class="task-avatar" asp-controller="Profile" asp-action="Index" asp-route-id="@task.AssignedTo.Id">
                        <img src="@(task.AssignedTo.ProfilePhotoPath == null ? "/images/profile-icon.png" : task.AssignedTo.ProfilePhotoPath)" alt="Alternate Text" loading="lazy"/>
                    </a>
                    <div class="task-assign">
                        <p class="m-0">@task.AssignedTo.Name</p>
                        <p class="m-0">@task.DueDate.ToString("dd.MM.y")</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Create -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-3">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="TaskManagement" asp-action="CreateTask">
                    <div class="task-form">
                        <div class="d-flex flex-column mb-5">
                            <input asp-for="@Model.ProjectId" id="task-project" class="mb-4" type="hidden" value="@Model.Projects.ProjectId"/>
                            <input asp-for="@Model.TaskTitle" id="task-title" class="input-title mb-4" type="text" value="" placeholder="Task Title" />
                            <textarea asp-for="@Model.TaskDescription" id="task-description" placeholder="Task Description"></textarea>
                        </div>
                        <div class="d-flex gap-3">
                            <div class="d-flex flex-column">
                                <label for="taskDue">Due to</label>
                                <input asp-for="@Model.DueDate" class="taskDatePicker" type="date" id="taskDue" value="" max="@Model.Projects.DueDate"/>
                            </div>
                            <div class="">
                                <p class="m-0">Assign to</p>
                                <div class="assign-to">
                                    @foreach (var participant in Model.Projects.Participants)
                                    {
                                        <input asp-for="@Model.AssignTo" type="radio" class="btn-check" id="@participant.User.UserName" autocomplete="off" value="@participant.UserId">
                                        <label class="btn btn-outline-primary" for="@participant.User.UserName">@participant.User.Name</label>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-5">
                        <div>
                            <button type="button" class="btn btn-sub btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x"></i></button>
                            <button type="submit" class="btn btn-sub btn-primary"><i class="bi bi-check"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal Update -->
<div class="modal fade" id="updateTaskModal" tabindex="-1" aria-labelledby="updateTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-3">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-controller="TaskManagement" asp-action="UpdateTask">
                    <div class="task-form">
                        <div class="d-flex flex-column mb-5">
                            <input asp-for="@Model.TaskId" id="update-task" class="mb-4" type="hidden" />
                            <input asp-for="@Model.ProjectId" id="update-project" class="mb-4" type="hidden" value="@Model.Projects.ProjectId" />
                            <input asp-for="@Model.TaskTitle" id="update-title" class="input-title mb-4" type="text"  placeholder="Task Title" />
                            <textarea asp-for="@Model.TaskDescription" id="update-description" placeholder="Task Description"></textarea>
                        </div>
                        <div class="d-flex gap-3">
                            <div class="d-flex flex-column">
                                <label for="taskDue">Due to</label>
                                <input asp-for="@Model.DueDate" class="taskDatePicker" type="date" id="updateTaskDue"  max="@Model.Projects.DueDate" />
                            </div>
                            <div class="">
                                <p class="m-0">Assign to</p>
                                <div class="assign-to">
                                    @foreach (var participant in Model.Projects.Participants)
                                    {
                                        <input asp-for="@Model.AssignTo" type="radio" class="btn-check" id="@participant.User.NormalizedUserName" autocomplete="off" value="@participant.UserId">
                                        <label class="btn btn-outline-primary" for="@participant.User.NormalizedUserName">@participant.User.Name</label>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-5">
                        <div>
                            <button type="submit" class="btn btn-sub btn-primary"><i class="bi bi-check"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasChat" aria-labelledby="offcanvasChatLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasChatLabel">Project Chat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body chat-container">
        <div class="message-container">
            <div id="messagesList">
                @foreach(var chat in Model.Messages)
                {
                    <div class="bubble-chat @(chat.User.Name == user.Name ? "user" : "other")">
                        <p>@chat.User.Name</p>
                        <p>@chat.Content</p>
                        <span>@chat.TimeStamp.AddHours(7).ToString("HH.mm")</span>
                    </div>
                }
            </div>
            <div class="input-section">
                <input type="hidden" id="projectId" value="@Model.Projects.ProjectId" />
                <input type="text" id="messageInput" placeholder="Message"/>
                <button class="send-button" id="sendButton"><i class="bi bi-send-fill m-0 p-0"></i></button>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    //untuk mengambil Old Value dan ditampilkan di Modal Update
    function GetValue(id){
        $.ajax({
            url: '@Url.Action("GetData")',
            type:"GET",
            data: {id : id},
            success: function (data) {
                console.log(data)
                $('#update-task').val(data.taskId);
                $('#update-title').val(data.taskTitle);
                $('#update-description').val(data.taskDescription);
                $('#updateTaskDue').val(data.dueDate);
            }
        });
    }

    window.addEventListener("DOMContentLoaded", () => {
        // Destructure to get the status from URL
        const [_, status] = window.location.href.split("="); 

        // Mapping element Id 
        const btnMap = {
            running: "running-btn",
            complete: "complete-btn",
            all: "all-btn"
        };

        // Mapping class yang akan tambahkan pada class list
        const statusClassMap = {
            running: "bg-warning",
            complete: "bg-success",
            default: "bg-info"
        };

        // Mengambil value dari btnMap sesuai dengan status yang sudah di destructuring
        const buttonId = btnMap[status] || btnMap.all;

        // Mengambil value dari statusClassMap sesuai dengan status yang sudah di destructuring
        const statusClass = statusClassMap[status] || statusClassMap.default;

        // Menambahkan value dari statusClassMap kedalam id yang sudah diambil
        document.getElementById(buttonId).classList.add(statusClass);

        // Mengambil id dari container messageList
        const chatContainer = document.getElementById("messagesList");

        // Mengatur scroll dari container agar langsung berada dibawah
        chatContainer.scrollTop = chatContainer.scrollHeight;

    });

    // Menginisialisasi connection ke signalR sesuai dengan endpoint yang sudah ditetapkan pada asp.net Route
    var connection = new signalR.HubConnectionBuilder().withUrl("/chat").build();

    // Connecting ke Websocket
    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    // Menginisialisasikan button dan event pada button
    document.getElementById("sendButton").addEventListener("click", function (event) {

        // Initialization variable object sesuai dengan id
        const projectId = document.getElementById("projectId");
        const message = document.getElementById("messageInput");

        // Memanggil method "SendMessage" pada server dengan parameter project id dan message
        connection.invoke("SendMessage", parseInt(projectId.value), message.value).then(function () {
            
            // Set Input Field kembali kosong
            message.value = ""
        }).catch(function (err) {

            // Mengembalikkan error untuk ditampilkan pada console jika method invoke gagal
            return console.error(err.toString());
        });
        event.preventDefault();
    });

    // Memanggil method "ReceiveMessage" pada server yang mengembalikkan 2 nilai 
    connection.on("ReceiveMessage", function (user, message) {

        // Initialization object dengan id messageList
        const chatContainer = document.getElementById("messagesList");

        // Variable untuk menampung nama dari user yang sedang login
        let aspName = "@user.Name"

        // Membuat sebuah elemen div
        let bubbleChat = document.createElement('div');

        // Cek apakah user yang dikirimkan dari RecieveMessage sama dengan user yang sedang login
        if (user == aspName) {

            // Jika T, maka akan menambahkan class bubble-chat & user ke elemen div
            bubbleChat.classList.add('bubble-chat', "user");
        }else{

            // Jika F, maka akan menambahkan class bubble-chat & other ke elemen div
            bubbleChat.classList.add('bubble-chat', "other");
        }

        // Membuat sebuah elemen p
        let nameParagraph = document.createElement('p');

        // Menambahkan nama user ke dalam elemen p sesuai yang dikirim dari method RecieveMessage
        nameParagraph.innerText = user;

        //Menambahkan elemen p ke dalam elemen div sebelumnya
        bubbleChat.appendChild(nameParagraph);

        // Membuat sebuah elemen p
        let messageParagraph = document.createElement('p');

        // Menambahkan pesan ke dalam elemen p sesuai yang dikirim dari method RecieveMessage
        messageParagraph.innerText = message;

        //Menambahkan elemen p ke dalam elemen div sebelumnya
        bubbleChat.appendChild(messageParagraph);

        // Membuat sebuah elemen span
        let chatTime = document.createElement('span');

        // Initialization Date (waktu sekarang)
        const now = new Date();

        // Mengambil data jam dan dikonversi ke string
        const hours = now.getHours().toString();

        // Mengambil data menit dan dikonversi ke string
        const minutes = now.getMinutes().toString();

        // Initialization format jam dalam bentuk string
        const timeString = `${hours}.${minutes}`;

        // Menambahkan timeString ke dalam elemen span
        chatTime.innerText = timeString;

        // Menambahakan elemen span ke dalam div
        bubbleChat.appendChild(chatTime);

        // Menambahkan elemen div ke dalam chat container
        chatContainer.appendChild(bubbleChat);

        // Scroll ke pesan yang baru saja masuk
        chatContainer.scrollTop = chatContainer.scrollHeight;
    });

</script>




